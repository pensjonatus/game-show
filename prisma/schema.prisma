// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id        String      @id @default(cuid())
  name      String
  avatarUrl String?
  states    TeamState[]
  Game      Game[]
}

model Answer {
  id         String   @id @default(cuid())
  content    String
  points     Int
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
}

model QuestionType {
  id       String      @id @default(cuid())
  name     String
  Question Question[]
  Round    RoundType[]
}

model Question {
  id             String       @id @default(cuid())
  content        String
  answers        Answer[]
  questionSetId  String
  questionSet    QuestionSet  @relation(fields: [questionSetId], references: [id])
  type           QuestionType @relation(fields: [questionTypeId], references: [id])
  questionTypeId String
  Game           Game[]
}

model QuestionSet {
  id        String     @id @default(cuid())
  name      String
  questions Question[]
  Game      Game[]
}

model TeamState {
  id          String @id @default(cuid())
  teamId      String
  team        Team   @relation(fields: [teamId], references: [id])
  gameId      String
  game        Game   @relation(fields: [gameId], references: [id])
  score       Int
  chancesLeft Int    @default(3)
}

model RoundType {
  id                  String       @id @default(cuid())
  name                String
  allowedQuestionType QuestionType @relation(fields: [questionTypeId], references: [id])
  questionTypeId      String
  Game                Game[]
}

model Game {
  id              String      @id @default(cuid())
  label           String
  startedAt       DateTime    @default(now()) @map(name: "created_at")
  updatedAt       DateTime    @updatedAt @map(name: "updated_at")
  questionSet     QuestionSet @relation(fields: [questionSetId], references: [id])
  questionSetId   String
  teams           Team[]
  teamStates      TeamState[]
  currentRound    RoundType   @relation(fields: [roundId], references: [id])
  roundId         String
  finished        Boolean     @default(false)
  currentQuestion Question    @relation(fields: [questionId], references: [id])
  questionId      String
}

// Auth

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
